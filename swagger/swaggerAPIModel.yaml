openapi: 3.0.0
info:
  title: Movie API
  version: 1.0.0
components:
  schemas:
    Movie:
      type: object
      required:
        - plot
        - genres
        - cast
        - poster
        - title
        - type
      properties:
        plot:
          type: string
        genres:
          type: array
          items:
            type: string
        runtime:
          type: integer
        cast:
          type: array
          items:
            type: string
        num_mflix_comments:
          type: integer
        poster:
          type: string
        title:
          type: string
        fullplot:
          type: string
        languages:
          type: array
          items:
            type: string
        released:
          type: string
          format: date
        directors:
          type: array
          items:
            type: string
        writers:
          type: array
          items:
            type: string
        awards:
          type: object
          properties:
            wins:
              type: integer
            nominations:
              type: integer
            text:
              type: string
        lastupdated:
          type: string
          format: date-time
        year:
          type: integer
        imdb:
          type: object
          properties:
            rating:
              type: number
            votes:
              type: integer
            id:
              type: integer
        countries:
          type: array
          items:
            type: string
        type:
          type: string
        tomatoes:
          type: object
          properties:
            viewer:
              type: object
              properties:
                rating:
                  type: number
                numReviews:
                  type: integer
                meter:
                  type: integer
            lastUpdated:
              type: string
              format: date-time
  paths:
  /movies:
    get:
      summary: Get all movies
      description: Retrieve a list of all movies.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: { movies: [movie1, movie2], message: 'Movies retrieved successfully' }
    
    post:
      summary: Create a new movie
      description: Create a new movie entry.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          description: Movie created successfully
          content:
            application/json:
              example: { movie: newMovie, message: 'Movie created successfully' }
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              example: { error: 'Invalid request or missing data' }
  
  /movies/{id}:
    get:
      summary: Get a movie by ID
      description: Retrieve a movie by its ID.
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: string
          example: '123'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example: { movie: movieById, message: 'Movie retrieved successfully' }
        '404':
          description: Movie not found
          content:
            application/json:
              example: { error: 'Movie not found' }

    put:
      summary: Update a movie by ID
      description: Update an existing movie by its ID.
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: string
          example: '123'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Movie'
        required: true
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              example: { movie: updatedMovie, message: 'Movie updated successfully' }
        '404':
          description: Movie not found
          content:
            application/json:
              example: { error: 'Movie not found' }
        '400':
          description: Invalid request or missing data
          content:
            application/json:
              example: { error: 'Invalid request or missing data' }

    delete:
      summary: Delete a movie by ID
      description: Delete a movie by its ID.
      parameters:
        - name: id
          in: path
          description: Movie ID
          required: true
          schema:
            type: string
          example: '123'
      responses:
        '200':
          description: Movie deleted successfully
          content:
            application/json:
              example: { movie: deletedMovie, message: 'Movie deleted successfully' }
        '404':
          description: Movie not found
          content:
            application/json:
              example: { error: 'Movie not found' }